"""
Django settings for seminar sample project.

Generated by 'django-admin startproject' using Django 5.0.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import os
from pathlib import Path
from urllib.parse import urlparse

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("DJANGO_SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = os.getenv("DJANGO_ALLOWED_HOSTS", "").split(",")

# Application definition

INSTALLED_APPS = [
    "app.common",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "app.user",
    "app.activity",
    "app.readlog",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "project.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "project.wsgi.application"

# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

if not os.getenv("DATABASE_HOST"):
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "db.sqlite3",
        }
    }
else:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.postgresql",  # django-postgres-extra を使う場合は "psqlextra.backend"
            "HOST": os.getenv("DATABASE_HOST"),
            "NAME": os.getenv("POSTGRES_DB"),
            "USER": os.getenv("POSTGRES_USER"),
            "PASSWORD": os.getenv("POSTGRES_PASSWORD"),
            "OPTIONS": {
                "connect_timeout": 10,
            },
        },
    }
    if os.getenv("REPLICA_DATABASE_HOST"):
        DATABASES["replica"] = {
            **DATABASES["default"],
            "HOST": os.getenv("REPLICA_DATABASE_HOST"),
        }

# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = "ja-jp"

TIME_ZONE = os.getenv("TZ", "Asia/Tokyo")

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = "static/"
STATIC_ROOT = BASE_DIR / "static"

MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "media"

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# セッション管理に Redis を使う／AWS環境では ElastiCache
if os.getenv("REDIS_LOCATION"):
    CACHES = {
        "default": {
            "BACKEND": "django.core.cache.backends.redis.RedisCache",
            "LOCATION": os.getenv("REDIS_LOCATION"),
        }
    }
    # cache が使えるときはセッションを cache で管理する
    SESSION_ENGINE = "django.contrib.sessions.backends.cache"
    SESSION_CACHE_ALIAS = "default"
    SESSION_COOKIE_AGE = 7 * 24 * 60 * 60  # 7日間

# ログ出力のデフォルト設定（AWS環境はこのままでよい）
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "console": {
            "level": "ERROR",
            "class": "logging.StreamHandler",
        },
    },
    "loggers": {
        "django": {
            "handlers": ["console"],
            "level": "ERROR",
        },
    },
}

# 環境情報 docker / develop / accept / production
ENVIRONMENT = os.getenv("ENVIRONMENT") or "local"
BASE_URL = os.getenv("BASE_URL", "")
SERVER_DOMAIN = urlparse(BASE_URL).netloc


# storages を使う
def __setup_storage(bucket_name_env, location_env, base_url=None):
    bucket_name = os.getenv(bucket_name_env)
    scheme, custom_domain, *_ = urlparse(base_url) if base_url else (None, None)  # base_url（あれば）を分解
    return (
        {
            "BACKEND": "storages.backends.s3boto3.S3Boto3Storage",
            "OPTIONS": {
                "bucket_name": bucket_name,
                "location": os.getenv(location_env, ""),
                **({"url_protocol": f"{scheme}:", "custom_domain": custom_domain} if scheme and custom_domain else {}),
            },
        }
        if bucket_name
        else {
            "BACKEND": "django.core.files.storage.FileSystemStorage",
        }
    )


STORAGES = {
    "default": {
        "BACKEND": "django.core.files.storage.FileSystemStorage",
    },
    "staticfiles": {
        "BACKEND": "django.contrib.staticfiles.storage.StaticFilesStorage",
    },
    "resource": __setup_storage(
        "RESOURCES_STORAGE_BUCKET",
        "RESOURCES_STORAGE_LOCATION",
        BASE_URL,
    ),
    "archive": __setup_storage(
        "ARCHIVE_STORAGE_BUCKET",
        "ARCHIVE_STORAGE_LOCATION",
        BASE_URL,
    ),
    "import_file": __setup_storage(
        "IMPORT_STORAGE_BUCKET",
        "IMPORT_STORAGE_LOCATION",
        BASE_URL,
    ),
}

# Django admin user
AUTH_USER_MODEL = "user.ServiceUser"

# https://console.cloud.google.com/apis/credentials で発行するクライアントID
GOOGLE_OAUTH_CLIENT_ID = os.getenv("GOOGLE_OAUTH_CLIENT_ID")
GOOGLE_OAUTH_CLIENT_SECRET = os.getenv("GOOGLE_OAUTH_CLIENT_SECRET")

# グループ名
ALL_USER_GROUP_NAME = "全ユーザー"
GOOGLE_USER_GROUP_NAME = "Googleログインユーザー"
